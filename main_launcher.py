#!/usr/bin/env python3
"""
AI Video Search - Main Launcher
Enhanced launcher v·ªõi h·ªó tr·ª£ Python version check v√† full installation options
"""

import os
import sys
import time
import traceback
import platform
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional

def print_banner():
    """Print application banner"""
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                 AI VIDEO SEARCH SYSTEM                    ‚ïë") 
    print("‚ïë         Enhanced Launcher v·ªõi Python Compatibility        ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()

def check_python_compatibility():
    """Check Python version and recommend optimal version"""
    current_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
    print(f"üêç Current Python: {current_version}")
    
    # Recommended versions based on compatibility testing
    recommended_versions = {
        "3.9": {"status": "‚úÖ Excellent", "ai_support": "Full", "tensorflow": "‚úÖ", "pytorch": "‚úÖ"},
        "3.10": {"status": "‚úÖ Excellent", "ai_support": "Full", "tensorflow": "‚úÖ", "pytorch": "‚úÖ"}, 
        "3.11": {"status": "‚úÖ Very Good", "ai_support": "Full", "tensorflow": "‚úÖ", "pytorch": "‚úÖ"},
        "3.12": {"status": "‚ö†Ô∏è Good", "ai_support": "Partial", "tensorflow": "‚ö†Ô∏è", "pytorch": "‚úÖ"},
        "3.13": {"status": "‚ö†Ô∏è Limited", "ai_support": "Basic", "tensorflow": "‚ùå", "pytorch": "‚ö†Ô∏è"}
    }
    
    current_key = f"{sys.version_info.major}.{sys.version_info.minor}"
    if current_key in recommended_versions:
        info = recommended_versions[current_key]
        print(f"   Compatibility: {info['status']}")
        print(f"   AI Support: {info['ai_support']}")
        print(f"   TensorFlow: {info['tensorflow']}")
        print(f"   PyTorch: {info['pytorch']}")
    else:
        print("   ‚ö†Ô∏è Unknown compatibility")
    
    print("\nüìã RECOMMENDED PYTHON VERSIONS FOR FULL AI FEATURES:")
    print("   ü•á Python 3.10.x - BEST CHOICE (Most stable for AI/ML)")
    print("   ü•à Python 3.9.x  - Excellent (All features supported)")
    print("   ü•â Python 3.11.x - Very good (Minor compatibility issues)")
    print("   ‚ö†Ô∏è Python 3.12.x - Limited (Some packages may fail)")
    print("   ‚ùå Python 3.13.x - Not recommended (Many AI packages incompatible)")
    
    if sys.version_info.major == 3 and sys.version_info.minor >= 13:
        print(f"\n‚ö†Ô∏è WARNING: Python {current_version} has limited AI package support!")
        print("   For full features, consider downgrading to Python 3.10.x")
        return False
    elif sys.version_info.major == 3 and sys.version_info.minor >= 12:
        print(f"\n‚ö†Ô∏è NOTICE: Python {current_version} may have some compatibility issues")
        return True
    else:
        print(f"\n‚úÖ Python {current_version} is well supported")
        return True

def check_system_status() -> Dict[str, Any]:
    """Check system capabilities and dependencies"""
    print("\nüîç Checking system capabilities...")
    
    status = {
        "python_compatible": check_python_compatibility(),
        "gpu": {"available": False, "name": "", "memory": 0},
        "dependencies": {
            "pytorch": False,
            "tensorflow": False,
            "opencv": False,
            "transformers": False,
            "sentence_transformers": False
        },
        "versions": {
            "full": {"available": False, "errors": []},
            "lite": {"available": False, "errors": []}
        }
    }
    
    # Check GPU
    try:
        import torch
        if torch.cuda.is_available():
            status["gpu"]["available"] = True
            status["gpu"]["name"] = torch.cuda.get_device_name(0)
            status["gpu"]["memory"] = torch.cuda.get_device_properties(0).total_memory // (1024**3)
            print(f"   ‚úÖ GPU: {status['gpu']['name']} ({status['gpu']['memory']}GB)")
        else:
            print("   ‚ö†Ô∏è GPU: CUDA not available")
    except Exception as e:
        print(f"   ‚ùå GPU: PyTorch error - {e}")
    
    # Check dependencies
    deps_to_check = [
        ("pytorch", "torch"),
        ("tensorflow", "tensorflow"),
        ("opencv", "cv2"),
        ("transformers", "transformers"),
        ("sentence_transformers", "sentence_transformers")
    ]
    
    for dep_name, module_name in deps_to_check:
        try:
            __import__(module_name)
            status["dependencies"][dep_name] = True
            print(f"   ‚úÖ {dep_name.title()}")
        except ImportError:
            print(f"   ‚ùå {dep_name.title()}")
    
    # Check Full version
    try:
        from ai_search_engine import EnhancedAIVideoSearchEngine
        from enhanced_hybrid_manager import EnhancedHybridModelManager
        
        # Test enhanced manager with all features
        manager = EnhancedHybridModelManager()
        enhanced_info = manager.get_enhanced_system_info()
        
        status["versions"]["full"]["available"] = True
        status["versions"]["full"]["enhanced_features"] = enhanced_info.get("enhanced_features", {})
        status["versions"]["full"]["ai_agents"] = enhanced_info.get("ai_agents", {})
        status["versions"]["full"]["tensorflow_models"] = enhanced_info.get("tensorflow_models", {})
        
        print("   ‚úÖ Full Version: Available")
        
        # Show enhanced features
        ai_agents_info = enhanced_info.get("ai_agents", {})
        if ai_agents_info.get("available"):
            print("   ü§ñ AI Agents: Available")
        else:
            reason = ai_agents_info.get("reason", "Not configured")
            print(f"   ‚ö†Ô∏è AI Agents: {reason}")
            
        tf_models_info = enhanced_info.get("tensorflow_models", {})
        if tf_models_info.get("available"):
            print("   üîß TensorFlow Models: Available")
        else:
            reason = tf_models_info.get("reason", "Not available")
            print(f"   ‚ö†Ô∏è TensorFlow Models: {reason}")
            
    except Exception as e:
        status["versions"]["full"]["errors"].append(str(e))
        print(f"   ‚ö†Ô∏è Full Version: {e}")
    
    # Check Lite version
    try:
        from ai_search_lite import AISearchEngineLite
        status["versions"]["lite"]["available"] = True
        print("   ‚úÖ Lite Version: Available")
    except Exception as e:
        status["versions"]["lite"]["errors"].append(str(e))
        print(f"   ‚ùå Lite Version: {e}")
    
    print()
    return status

def show_version_info(status: Dict[str, Any]):
    """Display detailed version information"""
    print("üìã VERSION COMPARISON")
    print("‚îÄ" * 60)
    
    # Full Version
    print("üî• FULL VERSION (GPU-Optimized + AI Agents)")
    print("   Features:")
    print("   ‚Ä¢ Advanced AI models (CLIP, BLIP)")
    print("   ‚Ä¢ GPU acceleration with RTX 3060")
    print("   ‚Ä¢ Hybrid model management")
    print("   ‚Ä¢ Semantic search capabilities")
    print("   ‚Ä¢ High accuracy image understanding")
    
    # Enhanced features display
    if "enhanced_features" in status["versions"]["full"]:
        features = status["versions"]["full"]["enhanced_features"]
        if features.get("ai_agents_available"):
            print("   ‚Ä¢ ü§ñ AI Agents (OpenAI, Anthropic, Local)")
        if features.get("tensorflow_models_available"):
            print("   ‚Ä¢ üîß TensorFlow Hub Models")
        
        total_caps = features.get("total_capabilities", 0)
        if total_caps > 0:
            print(f"   ‚Ä¢ üìä Total AI Capabilities: {total_caps}")
    
    if status["versions"]["full"]["available"]:
        print("   Status: ‚úÖ Available")
        if status["gpu"]["available"]:
            print(f"   GPU: ‚úÖ {status['gpu']['name']} ({status['gpu']['memory']}GB)")
        else:
            print("   GPU: ‚ö†Ô∏è Will use CPU fallback")
            
        # AI Agents status
        ai_agents = status["versions"]["full"].get("ai_agents", {})
        if ai_agents.get("available"):
            agents_count = len(ai_agents.get("agents", {}))
            print(f"   AI Agents: ‚úÖ {agents_count} agents configured")
            
            # API Keys status
            api_keys = ai_agents.get("api_keys_configured", {})
            if api_keys.get("openai"):
                print("   OpenAI: ‚úÖ API key configured")
            else:
                print("   OpenAI: ‚ö†Ô∏è API key not set")
                
            if api_keys.get("anthropic"):
                print("   Anthropic: ‚úÖ API key configured")
            else:
                print("   Anthropic: ‚ö†Ô∏è API key not set")
        else:
            print("   AI Agents: ‚ö†Ô∏è Not available")
            
        # TensorFlow models status  
        tf_models = status["versions"]["full"].get("tensorflow_models", {})
        if tf_models.get("available"):
            models_count = len(tf_models.get("models", {}))
            print(f"   TensorFlow: ‚úÖ {models_count} models available")
        else:
            print("   TensorFlow: ‚ö†Ô∏è Not available")
            
    else:
        print("   Status: ‚ö†Ô∏è Dependencies missing")
        for error in status["versions"]["full"]["errors"]:
            print(f"   Error: {error}")
    
    print()
    
    # Lite Version
    print("üí° LITE VERSION (Fast & Reliable)")
    print("   Features:")
    print("   ‚Ä¢ Image similarity search using OpenCV")
    print("   ‚Ä¢ Color-based frame search")
    print("   ‚Ä¢ Basic computer vision analysis")
    print("   ‚Ä¢ Fast performance without AI models")
    print("   ‚Ä¢ Low resource usage")
    
    if status["versions"]["lite"]["available"]:
        print("   Status: ‚úÖ Available")
        print("   Dependencies: ‚úÖ All satisfied (OpenCV, PIL, NumPy)")
    else:
        print("   Status: ‚ùå Not available")
        for error in status["versions"]["lite"]["errors"]:
            print(f"   Error: {error}")
    
    print()

def get_user_choice(status: Dict[str, Any]) -> Optional[str]:
    """Get user's enhanced version choice with detailed options"""
    print("üéØ CHOOSE YOUR AI VIDEO SEARCH EXPERIENCE:")
    print("‚ïê" * 60)
    
    choices = []
    
    # Option 1: NEW Web Interface
    choices.append(("1", "web", "üåê WEB INTERFACE - Multi-Dataset & Model Switching (NEW!)"))
    print("   1. üåê WEB INTERFACE - Multi-Dataset & Model Switching (NEW!)")
    print("      ‚Ä¢ üéØ Visual interface with drag-drop search")
    print("      ‚Ä¢ üîÑ Real-time model switching (CLIP Base/Large, BLIP)")
    print("      ‚Ä¢ üìÅ Multi-dataset management (Nature, People, Mixed)")
    print("      ‚Ä¢ ‚ö° GPU-accelerated search with previews")
    print("      ‚Ä¢ üñºÔ∏è Image upload and similarity search")
    print("      ‚Ä¢ üöÄ Best for new users and demonstrations")
    print("      ‚Ä¢ üåê Access: http://localhost:8080")
    print()
    
    # Option 2: Full Version API
    if status["versions"]["full"]["available"]:
        choices.append(("2", "full", "üî• FULL API VERSION - Complete AI Experience"))
        print("   2. üî• FULL API VERSION - Complete AI Experience")
        print("      ‚Ä¢ GPU-optimized deep learning models")
        print("      ‚Ä¢ Advanced semantic search with transformers")
        print("      ‚Ä¢ Multi-modal AI (vision + language)")
        
        # Show what's actually available
        ai_agents = status["versions"]["full"].get("ai_agents", {})
        tf_models = status["versions"]["full"].get("tensorflow_models", {})
        
        if ai_agents.get("available"):
            print("      ‚Ä¢ ‚úÖ OpenAI GPT-4 & Anthropic Claude integration")
        else:
            print("      ‚Ä¢ ‚ö†Ô∏è AI Agents: Available but not configured (API keys needed)")
            
        if tf_models.get("available"):
            print("      ‚Ä¢ ‚úÖ TensorFlow Hub pre-trained models")
        else:
            print("      ‚Ä¢ ‚ö†Ô∏è TensorFlow Hub: Available but not fully loaded")
            
        print("      ‚Ä¢ ‚úÖ Real-time video analysis with CLIP/BLIP")
        print("      ‚Ä¢ üåê Access: http://localhost:8000")
        
        if status["python_compatible"]:
            print("      ‚úÖ Status: Ready to launch")
        else:
            print("      ‚ö†Ô∏è Status: Limited Python compatibility")
        print()
    else:
        print("   1. üî• FULL VERSION - ‚ùå Not Available")
        print("      ‚Ä¢ Missing dependencies or incompatible Python version")
        print("      ‚Ä¢ Run option 3 to auto-install dependencies")
        print()
    
    # Option 2: Lite Version
    if status["versions"]["lite"]["available"]:
        choices.append(("2", "lite", "üí° LITE VERSION - Fast & Reliable"))
        print("   2. üí° LITE VERSION - Fast & Reliable")
        print("      ‚Ä¢ Basic computer vision with OpenCV")
        print("      ‚Ä¢ Color and histogram-based search")
        print("      ‚Ä¢ Fast performance without heavy AI models")
        print("      ‚Ä¢ Works on any Python 3.8+")
        print("      ‚Ä¢ Low resource usage")
        print("      ‚úÖ Status: Ready to launch")
        print()
    else:
        print("   2. üí° LITE VERSION - ‚ùå Not Available")
        print("      ‚Ä¢ Missing basic dependencies (OpenCV, PIL)")
        print()
    
    # Option 3: Auto-Install Full Dependencies
    choices.append(("3", "install", "üì¶ AUTO-INSTALL Full Dependencies"))
    print("   3. üì¶ AUTO-INSTALL Full Dependencies")
    print("      ‚Ä¢ Automatically install missing AI packages")
    print("      ‚Ä¢ Configure optimal settings for your Python version")
    print("      ‚Ä¢ Download and setup pre-trained models")
    print("      ‚Ä¢ Compatible with Python 3.9-3.13")
    print()
    
    # Option 4: Performance comparison
    if status["versions"]["lite"]["available"]:
        choices.append(("4", "compare", "üìä Performance Comparison"))
        print("   4. üìä Performance Comparison")
        print("      ‚Ä¢ Test search speed and accuracy")
        print("      ‚Ä¢ Compare Full vs Lite versions")
        print()
    
    # Option 5: Fix Dependencies
    choices.append(("5", "fix", "üîß Diagnose & Fix Issues"))
    print("   5. üîß Diagnose & Fix Issues")
    print("      ‚Ä¢ Check system compatibility")
    print("      ‚Ä¢ Repair broken installations")
    print("      ‚Ä¢ Install missing dependencies")
    print()
    
    # Option Q: Quit
    choices.append(("q", "quit", "‚ùå Quit"))
    print("   q. ‚ùå Quit")
    print()
    
    # Recommendation based on system status
    print("üí° RECOMMENDATIONS:")
    if status["python_compatible"] and status["versions"]["full"]["available"]:
        print("   ü•á Choose option 1 (Full Version) for complete AI experience")
    elif status["versions"]["lite"]["available"] and not status["versions"]["full"]["available"]:
        print("   ü•à Choose option 2 (Lite Version) or option 3 (Auto-Install)")
    elif not status["python_compatible"]:
        print("   ‚ö†Ô∏è Your Python version has compatibility issues")
        print("   üîß Best option: Install Python 3.10.x, then choose option 3")
    else:
        print("   üì¶ Choose option 3 (Auto-Install) to setup dependencies")
    print()
    
    while True:
        choice = input("üëâ Enter your choice (1-5, q): ").strip().lower()
        
        for key, value, _ in choices:
            if choice == key:
                return value
        
        print("‚ùå Invalid choice. Please enter 1, 2, 3, 4, 5, or q")

def start_full_version():
    """Start the full AI search system"""
    print("üöÄ Starting Full AI Search System...")
    print("=" * 50)
    
    try:
        # Import and start full backend
        import subprocess
        import sys
        
        print("üîÑ Initializing GPU-optimized AI models...")
        print("üåê Server will be available at: http://localhost:8000")
        print("üìñ API documentation at: http://localhost:8000/docs")
        print()
        print("To stop the server, press Ctrl+C")
        print("=" * 50)
        
        # Start full backend
        subprocess.run([sys.executable, "backend_ai.py"], check=True)
        
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
    except Exception as e:
        print(f"‚ùå Error starting full version: {e}")
        print("üí° Try using Lite version instead")

def start_lite_version():
    """Start the lite search system"""
    print("üöÄ Starting Lite AI Search System...")
    print("=" * 50)
    
    try:
        # Import and start lite backend
        import subprocess
        import sys
        
        print("üîÑ Initializing OpenCV-based search engine...")
        print("üåê Server will be available at: http://localhost:8000")
        print("üìñ API documentation at: http://localhost:8000/docs")
        print()
        print("To stop the server, press Ctrl+C")
        print("=" * 50)
        
        # Start lite backend
        subprocess.run([sys.executable, "backend_ai_lite.py"], check=True)
        
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
    except Exception as e:
        print(f"‚ùå Error starting lite version: {e}")

def run_performance_comparison():
    """Run performance comparison"""
    print("üìä Running Performance Comparison...")
    print("=" * 50)
    
    try:
        import subprocess
        import sys
        
        subprocess.run([sys.executable, "compare_performance.py"], check=True)
        
    except Exception as e:
        print(f"‚ùå Error running comparison: {e}")
    
    input("\nüëâ Press Enter to continue...")

def fix_dependencies():
    """Help user fix dependencies"""
    print("üîß DEPENDENCY FIXING GUIDE")
    print("=" * 50)
    
    print("üéØ For Full Version Support:")
    print("   1. Install PyTorch with CUDA:")
    print("      pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118")
    print()
    print("   2. Install AI model dependencies:")
    print("      pip install transformers sentence-transformers tensorflow-hub")
    print()
    print("   3. Install additional packages:")
    print("      pip install faiss-cpu pillow")
    print()
    
    print("‚ö° For Lite Version (Minimal):")
    print("   pip install opencv-python pillow numpy fastapi uvicorn python-multipart")
    print()
    
    print("üöÄ Auto-fix attempt:")
    choice = input("   Do you want to auto-install missing dependencies? (y/n): ").strip().lower()
    
    if choice == 'y':
        try:
            import subprocess
            import sys
            
            print("üîÑ Installing dependencies...")
            
            # Essential packages
            essential_packages = [
                "opencv-python",
                "pillow", 
                "numpy",
                "fastapi",
                "uvicorn",
                "python-multipart"
            ]
            
            subprocess.run([sys.executable, "-m", "pip", "install"] + essential_packages, check=True)
            print("‚úÖ Essential packages installed")
            
            # Try AI packages
            ai_packages = [
                "transformers",
                "sentence-transformers", 
                "tensorflow-hub",
                "faiss-cpu"
            ]
            
            try:
                subprocess.run([sys.executable, "-m", "pip", "install"] + ai_packages, check=True)
                print("‚úÖ AI packages installed")
            except:
                print("‚ö†Ô∏è Some AI packages failed to install")
            
            print("üéâ Dependency installation completed!")
            
        except Exception as e:
            print(f"‚ùå Installation failed: {e}")
    
    input("\nüëâ Press Enter to continue...")

def auto_install_full_dependencies():
    """Auto-install full dependencies based on Python version"""
    print("üì¶ AUTO-INSTALLING FULL DEPENDENCIES")
    print("=" * 60)
    
    # Check Python version and recommend installation strategy
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
    print(f"üêç Detected Python {python_version}")
    
    if python_version in ["3.13"]:
        print("‚ö†Ô∏è Python 3.13 detected - Using compatible packages only")
        requirements_file = "config/requirements_compatible.txt"
    elif python_version in ["3.12"]:
        print("‚ö†Ô∏è Python 3.12 detected - Mixed compatibility mode")
        requirements_file = "config/requirements_compatible.txt"
    else:
        print("‚úÖ Python version supports full AI packages")
        requirements_file = "config/requirements.txt"
    
    print(f"üìã Using requirements file: {requirements_file}")
    print()
    
    try:
        # Run setup.py for comprehensive installation
        print("üöÄ Running comprehensive setup...")
        print("This may take several minutes...")
        print()
        
        import subprocess
        result = subprocess.run([sys.executable, "setup.py"], 
                              capture_output=False, 
                              text=True)
        
        if result.returncode == 0:
            print("‚úÖ Auto-installation completed successfully!")
            print("üéâ You can now use the Full Version")
        else:
            print("‚ö†Ô∏è Installation completed with some warnings")
            print("üí° You may still be able to use Lite Version")
            
    except Exception as e:
        print(f"‚ùå Auto-installation failed: {e}")
        print("üîß Try manual installation:")
        print("   python setup.py")
    
    input("\nüëâ Press Enter to continue...")

def start_web_interface():
    """Start the enhanced web interface"""
    print("üåê Starting Enhanced Web Interface...")
    print("=" * 50)
    
    try:
        # Check if web interface exists
        if not os.path.exists("web_interface.py"):
            print("‚ùå web_interface.py not found")
            print("üí° Please ensure all files are properly installed")
            return False
            
        print("üîÑ Initializing web interface...")
        print("   ‚Ä¢ Multi-dataset management")
        print("   ‚Ä¢ Real-time model switching") 
        print("   ‚Ä¢ GPU acceleration")
        print("   ‚Ä¢ Visual search interface")
        print()
        
        print("üöÄ Starting server...")
        print("üì± Access URL: http://localhost:8080")
        print("‚èπÔ∏è  Press Ctrl+C to stop")
        print()
        
        # Import and run web interface
        import subprocess
        import sys
        
        result = subprocess.run([sys.executable, "web_interface.py"], 
                              cwd=os.getcwd())
        
        if result.returncode == 0:
            print("‚úÖ Web interface closed successfully")
        else:
            print("‚ö†Ô∏è Web interface exited with errors")
            
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("üí° Some dependencies may be missing")
        print("üîß Try running option 4 (Auto-Install) first")
        return False
    except Exception as e:
        print(f"‚ùå Failed to start web interface: {e}")
        print("üîß Check your installation and try again")
        return False

def start_full_version():
    """Start full version with all models"""
    print("üöÄ Starting full AI Video Search Engine...")
    try:
        from ai_search_engine import EnhancedAIVideoSearchEngine
        ai_search = EnhancedAIVideoSearchEngine()
        ai_search.run()
        return True
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("üí° Some dependencies may be missing")
        print("üîß Try running option 4 (Auto-Install) first")
        return False
    except Exception as e:
        print(f"‚ùå Failed to start full version: {e}")
        print("üîß Check your installation and try again")
        return False

def main():
    """Main application entry point"""
    print_banner()
    
    while True:
        # Check system status
        status = check_system_status()
        
        # Show version information
        show_version_info(status)
        
        # Get user choice
        choice = get_user_choice(status)
        
        if choice == "web":
            start_web_interface()
        elif choice == "full":
            start_full_version()
        elif choice == "lite":
            start_lite_version()
        elif choice == "install":
            auto_install_full_dependencies()
        elif choice == "demo":
            # Demo mode - start web interface with datasets
            print("üéÅ Starting demo mode with sample datasets...")
            start_web_interface()
        elif choice == "compare":
            run_performance_comparison()
        elif choice == "fix":
            fix_dependencies()
        elif choice == "exit":
            print("üëã Goodbye!")
            break
        
        print("\n" + "="*60 + "\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Application terminated by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        print(traceback.format_exc())
